/*
 * Core.java
 * 
 * Copyright (c) 2010, Ralf Biedert All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without modification, are
 * permitted provided that the following conditions are met:
 * 
 * Redistributions of source code must retain the above copyright notice, this list of
 * conditions and the following disclaimer. Redistributions in binary form must reproduce the
 * above copyright notice, this list of conditions and the following disclaimer in the
 * documentation and/or other materials provided with the distribution.
 * 
 * Neither the name of the author nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
 * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 * TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */
package sandbox.oldversions.net.jcores.v1;

import java.util.Collection;
import java.util.List;
import sandbox.oldversions.net.jcores.v1.cores.CoreClass;
import sandbox.oldversions.net.jcores.v1.cores.CoreCollection;
import sandbox.oldversions.net.jcores.v1.cores.CoreList;
import sandbox.oldversions.net.jcores.v1.cores.CoreObject;
import sandbox.oldversions.net.jcores.v1.cores.CoreString;

/**
 * @author Ralf Biedert
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class Core {

    /**
     * The core
     */
    public final static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Core $ = new Core();

    /**
     * @param <T>
     * @param clazz
     * @return .
     */
    @org.checkerframework.dataflow.qual.Pure
    public static <T> @org.checkerframework.checker.initialization.qual.FBCBottom @org.checkerframework.checker.nullness.qual.Nullable CoreClass<T> $(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Class<T> clazz) {
        return null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public static <T extends String> @org.checkerframework.checker.initialization.qual.FBCBottom @org.checkerframework.checker.nullness.qual.Nullable CoreString $(T object) {
        return null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public static <T extends Object> @org.checkerframework.checker.initialization.qual.FBCBottom @org.checkerframework.checker.nullness.qual.Nullable CoreObject<T> $(T object) {
        return null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public static <X, T extends Collection<X>> @org.checkerframework.checker.initialization.qual.FBCBottom @org.checkerframework.checker.nullness.qual.Nullable CoreCollection<X> $(T object) {
        return null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public static <X, T extends List<X>> @org.checkerframework.checker.initialization.qual.FBCBottom @org.checkerframework.checker.nullness.qual.Nullable CoreList<X> $(@org.checkerframework.checker.nullness.qual.Nullable T object) {
        return null;
    }

    @org.checkerframework.dataflow.qual.Pure
    public static @org.checkerframework.checker.initialization.qual.FBCBottom @org.checkerframework.checker.nullness.qual.Nullable CoreList<Object> $(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Object@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ... object) {
        return null;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public static void extend() {
    }
}
